#!/bin/bash

export SCRIPTS_MORPH=/tools/scripts-morph-v10.0.jar

work_dir=$1
num_procs=$2
gpu_id=$3

doc_strategy=${4:-f1}
sent_strategy=${5:-psq}
translation_strategy=${6:-ape_edinmt}

mkdir -p /outputs/retranslation /outputs/retranslation/config /outputs/retranslation/annotations
mkdir -p /outputs/retranslation/src /outputs/retranslation/src/edinmt /outputs/retranslation/src/edinmt/audio /outputs/retranslation/src/edinmt/text /outputs/retranslation/src/umdnmt /outputs/retranslation/src/ape
mkdir -p /outputs/retranslation/mt /outputs/retranslation/mt/edinmt /outputs/retranslation/mt/umdnmt /outputs/retranslation/mt/ape

echo "Generating candidates..."
bash retranslate_candidates $num_procs $doc_strategy $sent_strategy $translation_strategy

# translate

# ape
if [ "$(ls -A /outputs/retranslation/src/ape)" ]; then
	echo "Running APE..."
	docker run --gpus "$gpu_id" --rm -v "$work_dir/retranslation/src/ape:/input_dir" -v "$work_dir/retranslation/mt/ape:/output_dir" ape:v1.0 kk
fi

# edinmt
for doc_type in "audio" "text"; do
	if [ "$(ls -A /outputs/retranslation/src/edinmt/$doc_type)" ]; then
		echo "Running EDINMT $doc_type"
		docker run --gpus all --rm --user root -v "$work_dir/retranslation/src/edinmt/$doc_type":/mt/input_dir -v "$work_dir/retranslation/mt/edinmt/":/mt/output_dir -e NBEST_WORDS=0 -e NBEST=5 -e TYPE="$doc_type" -e MODE=accurate -e DEVICES="$gpu_id" -e QUERY=1 scriptsmt/systems:v21.5.2 translate kk en /mt/input_dir /mt/output_dir
	fi
done

# umdnmt
if [ "$(ls -A /outputs/retranslation/src/umdnmt)" ]; then
	echo "Running UMDNMT"
	python scripts/retranslate_umdnmt.py --input_dir "/outputs/retranslation/src/umdnmt" --output_dir "/outputs/retranslation/mt/umdnmt"
fi

#cp -r /outputs/markup /outputs/markup_bk
# generate markup
echo "Generating markups..."
bash retranslate_markup $num_procs
