#!/bin/bash

start_morph_server () {
    cwd=`pwd`
    morph_dir=`dirname $SCRIPTS_MORPH`
    cd $morph_dir
    echo ">>  java -jar $SCRIPTS_MORPH $MORPH_PORT EN &"
    java -jar $SCRIPTS_MORPH $MORPH_PORT EN \
        > >(tee /outputs/logs-latest/morph.out.log) \
        2> >(tee /outputs/logs-latest/morph.err.log >&2) &
    cd $cwd
}

start_doc_server () {
    echo ">>  doc_server $DOC_PORT $NIST_DATA $DOCSERVER_CONFIG &"
    doc_server $DOC_PORT $NIST_DATA $DOCSERVER_CONFIG \
        > >(tee /outputs/logs-latest/doc.out.log) \
        2> >(tee /outputs/logs-latest/doc.err.log >&2) &
    sleep 1
    ( tail -f -n1 /outputs/logs-latest/doc.out.log & ) | grep -q "Waiting for client request on port $DOC_PORT.."
}

start_query_server () {
    echo ">>  query_server $QUERY_PORT $MORPH_PORT $NIST_DATA $QUERYSERVER_CONFIG &"
    query_server $QUERY_PORT $MORPH_PORT $NIST_DATA \
        $QUERYSERVER_CONFIG \
        > >(tee /outputs/logs-latest/query.out.log) \
        2> >(tee /outputs/logs-latest/query.err.log >&2) &
    sleep 1
    ( tail -f -n1 /outputs/logs-latest/query.out.log & ) | grep -q "Waiting for client request on port $QUERY_PORT.."
}

start_queryrel_server () {

qrel_args="/models/queryrel/en_embed.npy /models/queryrel/lt_embed.npy"
qrel_args="$qrel_args /models/queryrel/en_vocab.pkl" 
qrel_args="$qrel_args /models/queryrel/lt_vocab.pkl /models/queryrel/modelv2.pkl"

echo ">>  queryrel_server $QUERYREL_PORT $qrel_args"
queryrel_server $QUERYREL_PORT $qrel_args \
        > >(tee /outputs/logs-latest/qrel.out.log) \
        2> >(tee /outputs/logs-latest/qrel.err.log >&2) &

    sleep 1
    ( tail -f -n1 /outputs/logs-latest/qrel.out.log & ) \
        | grep -q "Query relevance server started on port $QUERYREL_PORT"
}

start_psq_server () {

argstr=""
query_jsons=""
if compgen -G "/query-*" > /dev/null; then
    query_jsons="$query_jsons `ls /query-*/query*`"
    argstr="$argstr /query-*/query*"
fi

if [[ -d /query ]]; then
    query_jsons="$query_jsons `ls /query/query*`"
    argstr="$argstr /query/query*"
fi
echo ">>  sumpsq $PSQ_PORT $argstr"
sumpsq $PSQ_PORT $query_jsons \
        > >(tee /outputs/logs-latest/psq.out.log) \
        2> >(tee /outputs/logs-latest/psq.err.log >&2) &

    sleep 1
    ( tail -f -n1 /outputs/logs-latest/psq.out.log & ) \
        | grep -q "Waiting for client request on port $PSQ_PORT.."
}

start_annotation_server () {

    if [[ $VERBOSE_SUM != "" ]]; then
        VERBOSE="--verbose"
    else
        VERBOSE=""
    fi

echo ">>  annotation_server $ANNOTATION_PORT $QUERY_PORT $DOC_PORT $MODELS $ANNOTATION_CONFIG $VERBOSE"
    annotation_server $ANNOTATION_PORT $QUERY_PORT $DOC_PORT $MODELS \
        $ANNOTATION_CONFIG $VERBOSE \
        > >(tee /outputs/logs-latest/ann.out.log) \
        2> >(tee /outputs/logs-latest/ann.err.log >&2) &
    sleep 1
    ( tail -f -n1 /outputs/logs-latest/ann.out.log & ) \
        | grep -q "Waiting for client request on port $ANNOTATION_PORT.."
}

CONFIGS=/app/scripts/configs
rm -f /outputs/logs-latest/*

export QUERYSERVER_CONFIG=$CONFIGS/query.gold.config.json
export DOCSERVER_CONFIG=$CONFIGS/docs.gold.config.json
export NIST_DATA=/NIST-data
export MODELS=/models
export SCRIPTS_MORPH=/tools/scripts-morph-v6.1.jar
if [[ $LANG_SUM == "" ]]; then
    lang="all"
else
    lang=$LANG_SUM
fi
export ANNOTATION_CONFIG=$CONFIGS/annotator.gold.$lang.json
if [[ $lang == "lt" ]] || [[ $lang == "all" ]]; then
    USE_QUERYREL="True"
else
    USE_QUERYREL="False"
fi


mkdir -p /outputs/logs-latest

echo "Starting gold summarizer ($lang)!"
echo
echo "Starting English morphological analyzer:"
    start_morph_server
echo "English morphological analyzer running."
echo
echo "Starting document server:"
    start_doc_server
echo "Document server running."
echo
echo "Starting query server:"
    start_query_server
echo "Query server running."
echo
echo "Staring PSQ server:"
    start_psq_server
echo "PSQ server running."
echo 
if [[ $USE_QUERYREL == "True" ]]; then
    echo "Starting queryrel server:"
        start_queryrel_server
    echo "Queryrel server running."
    echo
fi
echo "Starting annotation server:"
    start_annotation_server
echo "Annotation server running."
echo
echo "Summarization server is ready."
while true; do sleep 9999999; done
