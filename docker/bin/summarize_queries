#!/bin/bash


make_args () {
    query_list=$1
    clir_dir=$2
    for query in $query_list; do

        while read -r doc_score; do
               doc=`echo $doc_score | cut -d " " -f1`
               score=`echo $doc_score | cut -d " " -f3`
               if [ ! -z "$doc" ]; then
                   printf "$query $doc $score\n"
               fi
        done <<< `cat /$clir_dir/$query.tsv | grep -E "\tY\t"`

    done
}

get_markup_gen () {
    if [ `is_example_of $1 $2 $3` == "True" ]; then
        echo "summarkup.generators.conceptv2.ConceptV2"
    elif [ `is_morph $1 $2 $3` == "True" ]; then
        echo "summarkup.generators.morphv1.MorphV1"
    elif [ `is_conceptual $1 $2 $3` == "True" ]; then
        echo "summarkup.generators.conceptv2.ConceptV2"
    elif [ `is_lexical $1 $2 $3` == "True" ]; then
        echo "summarkup.generators.lexicalv2.LexicalV2"
    else
        echo "NONE"
    fi
}

export -f get_markup_gen

get_markup_config () {
    gen=$1
    lang=$2

    if [[ $gen == "summarkup.generators.conceptv2.ConceptV2" ]]; then

        if [[ $LITE_SUM == "True" ]]; then
            echo "/app/scripts/configs/concept.v2.lite.config.json"
        elif [[ $GOLD_SUM == "True" ]]; then
            echo "/app/scripts/configs/concept.v2.$lang.gold.config.json"
        else
            echo "/app/scripts/configs/concept.v2.$lang.config.json"
        fi
    elif [[ $gen == "summarkup.generators.lexicalv2.LexicalV2" ]]; then
        if [[ $LITE_SUM == "True" ]]; then
            echo "/app/scripts/configs/lexical.v2.lite.config.json"
        elif [[ $GOLD_SUM == "True" ]]; then
            echo "/app/scripts/configs/lexical.v2.$lang.gold.config.json"
        else
            echo "/app/scripts/configs/lexical.v2.$lang.config.json"
        fi
    elif [[ $gen == "summarkup.generators.morphv1.MorphV1" ]]; then
        if [[ $LITE_SUM == "True" ]]; then
            echo "/app/scripts/configs/morph.v1.lite.config.json"
        elif [[ $GOLD_SUM == "True" ]]; then
            echo "/app/scripts/configs/morph.v1.$lang.gold.config.json"
        else
            echo "/app/scripts/configs/morph.v1.$lang.config.json"
        fi
    else
        echo "NONE"
    fi


}
export -f get_markup_config

summarize () {
    query_id=$1
    doc_id=$2
    output_dir=$4
    lang=`doc_client $DOC_PORT lang $doc_id`

    nc=`num_components $QUERY_PORT $1`
    gen1=`get_markup_gen $QUERY_PORT $query_id 1`
    genargs1=`get_markup_config $gen1 $lang`
    echo "$1 $2 $3 $4 $lang $gen1 $genargs1"
    if [[ $DEBUG_SUM == "True" ]]; then
        dbg="--debug"
           if [[ `is_relevant $QUERY_PORT $query_id $doc_id` == "True" ]]; then
                qdlabel="REL"
    
                rcolor="green"

            else
                qdlabel="NOT REL"
                rcolor="red"
            fi
    else
        dbg=""
    fi

    
  
    if [[ ! -f "$output_dir/annotations/$query_id/$query_id.$doc_id.c1.pkl" ]]; then

        annotate_material $ANNOTATION_PORT $query_id $doc_id 1 \
            "$output_dir/annotations/$query_id/$query_id.$doc_id.c1.pkl"
    fi
    if [[ ! -f $output_dir/markup/$query_id/$query_id.$doc_id.c1.json ]]; then
        generate_markup $gen1 \
            $output_dir/annotations/$query_id/$query_id.$doc_id.c1.pkl \
            $output_dir/markup/$query_id/$query_id.$doc_id.c1.json \
            --args $genargs1 \
            --quiet
    fi
#    if [[ ! -f $output_dir/images/$query_id/$query_id.$doc_id.c1.png ]]; then 
#        generate_image scripts/configs/summary_style.v2.css \
#            $output_dir/markup/$query_id/$query_id.$doc_id.c1.json \
#            $output_dir/images/$query_id/$query_id.$doc_id.c1.png \
#            $dbg
#    fi
#
#    if [[ $DEBUG_SUM == "True" ]]; then
#        convert -pointsize 25 -fill $rcolor -draw "text 850,30 \"$qdlabel\"" \
#            $output_dir/images/$query_id/$query_id.$doc_id.c1.png \
#            $output_dir/images/$query_id/$query_id.$doc_id.c1.png
#    fi
#
    if [ "$nc" == "2" ]; then
        gen2=`get_markup_gen $QUERY_PORT $query_id 2`
        genargs2=`get_markup_config $gen2 $lang`
        echo "$1 $2 $3 $4 $lang $gen2 $genargs2"
 
        if [[ ! -f "$output_dir/annotations/$query_id/$query_id.$doc_id.c2.pkl" ]]; then
            annotate_material $ANNOTATION_PORT $query_id $doc_id 2 \
                $output_dir/annotations/$query_id/$query_id.$doc_id.c2.pkl
        fi
        
        if [[ ! -f "$output_dir/markup/$query_id/$query_id.$doc_id.c2.json" ]]; then 
        generate_markup $gen2 \
            $output_dir/annotations/$query_id/$query_id.$doc_id.c2.pkl \
            $output_dir/markup/$query_id/$query_id.$doc_id.c2.json \
            --args $genargs2 \
            --quiet
        fi
         
#        if [[ ! -f "$output_dir/images/$query_id/$query_id.$doc_id.c2.png" ]]; then
#        generate_image scripts/configs/summary_style.v2.css \
#            $output_dir/markup/$query_id/$query_id.$doc_id.c2.json \
#            $output_dir/images/$query_id/$query_id.$doc_id.c2.png \
#            $dbg
#        fi
#        if [[ $DEBUG_SUM == "True" ]]; then
#            convert -pointsize 25 -fill $rcolor -draw "text 850,30 \"$qdlabel\"" \
#                $output_dir/images/$query_id/$query_id.$doc_id.c2.png \
#                $output_dir/images/$query_id/$query_id.$doc_id.c2.png
#    fi


    fi

}

export -f summarize

if [[ $3 != "" ]]; then
    clir_dir="clir-$3"
    output_dir=/outputs/$3
else
    clir_dir="clir"
    output_dir=/outputs/
fi



args=`python scripts/make_args.py $QUERY_PORT /clir/ /outputs $1 `
#exit
#args=`make_args "$1" $clir_dir`
if [ "$args" == "" ]; then                                                     
    exit                                                                   
fi 
tmpfile=$(mktemp /tmp/summarize-queries.XXXXXX)
echo "$args" > $tmpfile
split -l 10000 $tmpfile $tmpfile-
rm $tmpfile

for path in `ls $tmpfile-*`; do
    args=`cat $path`
    parallel --link -j$2 summarize \
        ::: `echo "$args" | cut -d " " -f1` \
        ::: `echo "$args" | cut -d " " -f2` \
        ::: `echo "$args" | cut -d " " -f3` \
        ::: $output_dir
    rm $path
done
