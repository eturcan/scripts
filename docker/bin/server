#!/bin/bash



# Check for parameter for running server forever
KEEP_RUNNING=false
PARAMS=""

# Check if -k command is given. If so, keep server running forever
while [ "$1" != "" ]; do
    case $1 in
        -k | --keep_running )
            KEEP_RUNNING=true
            shift
        ;;
        * ) #perserve postional arguments
            PARAMS="$PARAMS $1"
            shift
    esac
done

CONFIGS=/app/scripts/configs
rm -f /outputs/logs-latest/*

# read from /experiment directory and prepare variables

experiment_config=`ls /experiment/*.json`
new_doc_config=/app/config/doc.server.config.json
lang=$(cat $experiment_config | jq .query_processor.target_language | \
    sed -e 's/"//g')

# Read in query_list_path and create symlinks to /query
# Also save valid queries into $query array
declare -a query
for query_list_path in $(cat "$experiment_config" | jq -r '.query_processor.query_list_path[]' ); do
    echo "query list path found:${query_list_path}. Creating symbolic links to /query"
    for f in $(find "/NIST-data/$query_list_path" -type f ! -name "*.*" -printf "%P\n" );
    do
        #if [[ -f "/NIST-data/$query_list_path/$f.lft" ]] && [[ -f "/NIST-data/$query_list_path/$f.rgt" ]]; then
        if [[ $f == query* ]] && ( [[ $f != *.lft ]] || [[ $f != *.rgt ]] ); then
            query+=("$f")
            ln -s "/NIST-data/$query_list_path/$f" "/query/$f"
            ln -s "/NIST-data/$query_list_path/$f.lft" "/query/$f.lft"
            ln -s "/NIST-data/$query_list_path/$f.rgt" "/query/$f.rgt"
        fi
    done
done

if [ ${#query[@]} -eq 0 ]; then
echo "Could not find queries in /query. Exiting..."
exit
else
    QUERY="${query[@]}"
    export QUERY
fi

# echo "Using audio segmentation: $AUDIOSEG_SUM"

# if [[ $AUDIOSEG_SUM != "True" ]]; then
#     audioseg_arg="--no-audio-seg"
# else
#     audioseg_arg=""
# fi

# Setup doc server config based on experiment json.
echo "experiment_config $experiment_config /NIST-data $new_doc_config"
experiment_config $experiment_config /NIST-data $new_doc_config --no-audio-seg

# Setup nbest translations
new_doc_config_nbest=/app/config/doc.server.config.nbest.json
echo "extract_nbest_translations $new_doc_config /NIST-data /outputs $new_doc_config_nbest" 
extract_nbest_translations $new_doc_config /NIST-data /outputs $new_doc_config_nbest

echo "Deriving doc server config from experiment config $experiment_config"
export DOCSERVER_CONFIG=$new_doc_config_nbest
echo "Setting new doc server config: $DOCSERVER_CONFIG"

# Setup annotator config based on language code of experiment json.
export ANNOTATION_CONFIG=$CONFIGS/annotator.$lang.submission.op1.v1.0.json

echo
echo "Setting new annotation config: $ANNOTATION_CONFIG"
echo

queryrel_langs=(lt ps fa kk ka)
if [[ "${queryrel_langs[@]} " =~ " ${lang}" ]]; then
    USE_QUERYREL="True"
else
    USE_QUERYREL="False"
fi

# Setup psq keys for PSQ server. Try to find first in experiment config
# If not found, try to default to default config
psq_keys="$(jq '.query_processor.psq_keys[]? // empty' $experiment_config | sed -e 's/"//g' )"
if [[ ! -z "$psq_keys" ]]; then
    echo "PSQ Keys found in experiment config: ${psq_keys}"
else
    psq_config_file="/app/scripts/configs/psq.${lang}.config.json"
    if [[ -f "${psq_config_file}" ]]; then
        psq_keys="$(jq '.[]' ${psq_config_file} | sed -e 's/"//g')"
        echo "PSQ Keys found in default config: ${psq_keys}"
    else
        echo "Couldn't found PSQ keys. Please make sure it is defined either in the experiment config or has a default config"
        exit
    fi
fi

export NIST_DATA=/NIST-data
export MODELS=/models
export SCRIPTS_MORPH=/tools/scripts-morph-v11.0.jar
export QUERYSERVER_CONFIG=$CONFIGS/query.latest.config.json


start_morph_server () {
    cwd=`pwd`
    morph_dir=`dirname $SCRIPTS_MORPH`
    cd $morph_dir
    echo ">>  java -jar $SCRIPTS_MORPH $MORPH_PORT EN &"
    java -jar $SCRIPTS_MORPH $MORPH_PORT EN \
        > >(tee /outputs/logs-latest/morph.out.log) \
        2> >(tee /outputs/logs-latest/morph.err.log >&2) &
    cd $cwd
}

start_doc_server () {
    echo ">>  doc_server $DOC_PORT $NIST_DATA $DOCSERVER_CONFIG &"
    doc_server $DOC_PORT $NIST_DATA $DOCSERVER_CONFIG \
        > >(tee /outputs/logs-latest/doc.out.log) \
        2> >(tee /outputs/logs-latest/doc.err.log >&2) &
    sleep 1
    ( tail -f -n1 /outputs/logs-latest/doc.out.log & ) | grep -q "Waiting for client request on port $DOC_PORT.."
}

start_query_server () {
    echo ">>  query_server $QUERY_PORT $MORPH_PORT $NIST_DATA $QUERYSERVER_CONFIG /query &"
    query_server $QUERY_PORT $MORPH_PORT $NIST_DATA \
        $QUERYSERVER_CONFIG /query \
        > >(tee /outputs/logs-latest/query.out.log) \
        2> >(tee /outputs/logs-latest/query.err.log >&2) &
    sleep 1
    ( tail -f -n1 /outputs/logs-latest/query.out.log & ) | grep -q "Waiting for client request on port $QUERY_PORT.."
}

start_annotation_server () {

    if [[ $VERBOSE_SUM != "" ]]; then
        VERBOSE="--verbose"
    else
        VERBOSE=""
    fi

echo ">>  annotation_server $ANNOTATION_PORT $QUERY_PORT $DOC_PORT $MODELS $ANNOTATION_CONFIG $VERBOSE"
    annotation_server $ANNOTATION_PORT $QUERY_PORT $DOC_PORT $MODELS \
        $ANNOTATION_CONFIG $VERBOSE \
        > >(tee /outputs/logs-latest/ann.out.log) \
        2> >(tee /outputs/logs-latest/ann.err.log >&2) &
    sleep 1
    ( tail -f -n1 /outputs/logs-latest/ann.out.log & ) \
        | grep -q "Waiting for client request on port $ANNOTATION_PORT.."
}

start_queryrel_server () {

qrel_args="$lang /models/queryrel_artifacts"

echo ">>  queryrel_server $QUERYREL_PORT $qrel_args"
export PYTHONPATH=$PYTHONPATH:/app/CLIR-Summarization-19/queryrel
queryrel_server $QUERYREL_PORT $qrel_args \
        > >(tee /outputs/logs-latest/qrel.out.log) \
        2> >(tee /outputs/logs-latest/qrel.err.log >&2) &

    sleep 1
    ( tail -f -n1 /outputs/logs-latest/qrel.out.log & ) \
        | grep -q "Query relevance server started on port $QUERYREL_PORT"
}

start_psq_server () {

argstr=""
query_jsons=""
if compgen -G "/query-*" > /dev/null; then
    echo "in compgen"
    query_jsons="$query_jsons `ls /query-*/query*`"
    argstr="$argstr /query-*/query*"
fi

if [[ -d /query ]]; then
    echo "in /query"
    query_jsons="$query_jsons `find -L /query/ -type f ! -name "*.*"`"
    argstr="$argstr `find -L /query/ -type f ! -name "*.*"`"
fi

sumpsq $PSQ_PORT $query_jsons "$psq_keys" \
        > >(tee /outputs/logs-latest/psq.out.log) \
        2> >(tee /outputs/logs-latest/psq.err.log >&2) &

    sleep 1
    ( tail -f -n1 /outputs/logs-latest/psq.out.log & ) \
        | grep -q "Waiting for client request on port $PSQ_PORT.."
}

mkdir -p /outputs/logs-latest /outputs/cache

cwd=`pwd`
morhp_dir=`dirname $SCRIPTS_MORPH`
echo "Kicking off the summarizer..."
echo
echo "Starting English morphological analyzer:"
    start_morph_server
echo "English morphological analyzer running."
echo
echo "Starting document server:"
    start_doc_server
echo "Document server running."
echo
echo "Starting query server:"
    start_query_server
echo "Query server running."
echo
echo "Staring PSQ server:"
    start_psq_server
echo "PSQ server running."
echo 
if [[ $USE_QUERYREL == "True" ]]; then
    echo "Starting queryrel server:"
        start_queryrel_server
    echo "Queryrel server running."
    echo
fi
echo "Starting annotation server:"
    start_annotation_server
echo "Annotation server running."

echo
echo "Summarization server is ready."
if [[ "${KEEP_RUNNING}" == true  ]]; then
	while true; do sleep 9999999; done
fi